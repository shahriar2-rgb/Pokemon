{"version":3,"sources":["helpers/pokemonTypes.js","logo.svg","components/Card/Card.js","components/Card/index.js","services/pokemon.js","components/Navbar/Navbar.js","components/Navbar/index.js","App.js","reportWebVitals.js","index.js"],"names":["typeColors","bug","dragon","fairy","fire","ghost","ground","normal","pyschic","steel","dark","electric","fighting","flying","grass","ice","poison","rock","water","Card","pokemon","className","src","sprites","front_default","alt","name","types","map","type","style","backgroundColor","pokemonType","weight","height","order","base_experience","abilities","ability","getAllPokemon","url","a","Promise","resolve","reject","fetch","then","res","json","data","getPokemon","Navbar","href","App","useState","pokemonData","setPokemonData","nextUrl","setNextUrl","prevUrl","setPrevUrl","loading","setLoading","initialUrl","useEffect","response","next","previous","loadingPokemon","results","fetchData","prev","all","pokemonRecord","_pokemondata","console","log","class","role","i","onClick","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.513503e3.chunk.js","sourcesContent":["const typeColors = {\n    bug: '#729f3f',\n    dragon: '#53a4cf',\n    fairy: '#fdb9e9',\n    fire: '#fd7d24',\n    ghost: '#7b62a3',\n    ground: '#f7de3f',\n    normal: '#a4acaf',\n    pyschic: '#f366b9',\n    steel: '#9eb7b',\n    dark: '#707070',\n    electric: '#eed535',\n    fighting: '#d56723',\n    flying: '#3dc7ef',\n    grass: '#9bcc50',\n    ice: '#51c4e7',\n    poison: '#b97fc9',\n    rock: '#a38c21',\n    water: '#4592c4'\n}\n\nexport default typeColors;","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react';\nimport './style.css'\nimport pokemonType from '../../helpers/pokemonTypes'\nfunction Card({ pokemon }) {\n    return (\n        <div className= 'card'>\n            <div className = 'card__img'>\n            <img src={ pokemon.sprites.front_default } alt=\"\"></img>\n            </div>\n            <h5 className = 'card-title'>\n                { pokemon.name }\n            </h5>\n            <div className = 'card__types'>\n                { pokemon.types.map(type =>{\n                    return (\n                        <div className = 'card__type' style={{backgroundColor: pokemonType[type.type.name]}}>\n                            {type.type.name}\n                        </div>\n                    )\n                })}\n            </div>\n            <div className ='card__info'>\n                <div className = 'card__data'>\n                    <p className='try'>Weight: { pokemon.weight}  </p>\n                    <p className='try'>Height: { pokemon.height} </p>\n                    \n                </div>\n\n                <div className = 'card__data'>\n                <p className='try'>Order: { pokemon.order} </p>\n                    <p className='try'>base: { pokemon.base_experience} </p>\n                </div>\n                <div className = 'card__data'>\n                    \n                </div>\n\n                <div className = 'card__data'>\n                    <p className=''>Abilities: { pokemon.abilities.map(ability =>{\n                        return (\n                                <p>{ability.ability.name}</p>\n                        )\n                    })} </p>\n\n                </div>\n\n            </div>\n        </div>\n    )\n}\n\n\nexport default Card;","import Card from './Card'\n\nexport default Card;","\n//Get data for all the pokemon\nexport async function getAllPokemon(url) {\n    return new Promise((resolve, reject) => {\n        fetch(url).then(res => res.json())\n            .then(data => {\n                resolve(data)\n            })\n    });\n}\n\n//Get data for individual pokemon\nexport async function getPokemon(url){\n    return new Promise((resolve, reject)=>{\n        fetch(url).then(res => res.json())\n            .then(data => {\n                resolve(data)\n            })\n    })\n}","import React from 'react';\nimport './style.css'\nfunction Navbar() {\n    return (\n    <div className='Navbar'>\n        The datas are fetched from <a href='https://pokeapi.co/api/v2/pokemon'>Pokemon API.</a>\n        \n    </div>\n    )\n\n}\n\n\nexport default Navbar;","import Navbar from './Navbar'\n\nexport default Navbar;","import React, { useState, useEffect} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Card from './components/Card'\nimport { getAllPokemon, getPokemon } from './services/pokemon';\nimport Navbar from './components/Navbar';\n\n\n\n\nfunction App() {\n  const [pokemonData, setPokemonData] = useState([]);\n  const [nextUrl, setNextUrl] = useState('');\n  const [prevUrl, setPrevUrl] = useState('');\n  const [loading, setLoading] = useState(true);\n  const initialUrl = 'https://pokeapi.co/api/v2/pokemon?offset=0&limit=20'\n\n  useEffect(() =>{\n    async function fetchData() {\n      let response = await getAllPokemon(initialUrl);\n      setNextUrl(response.next);\n      setPrevUrl(response.previous);\n      await loadingPokemon(response.results);\n      setLoading(false);\n    }\n    fetchData();\n\n  }, [] );\n\n  const next = async () =>{\n    setLoading(true);\n    let data = await getAllPokemon(nextUrl)\n    await loadingPokemon(data.results);\n    setNextUrl(data.next)\n    setPrevUrl(data.previous)\n    setLoading(false);\n  }\n  const prev = async () =>{\n    if (!prevUrl) return;\n    setLoading(true);\n    let data = await getAllPokemon(prevUrl)\n    await loadingPokemon(data.results);\n    setNextUrl(data.next)\n    setPrevUrl(data.previous)\n    setLoading(false);\n  }\n\n  const loadingPokemon = async (data) => {\n    //will take a array of promises and return the array when all the promises have resolved\n    let _pokemondata = await Promise.all(data.map(async pokemon =>{\n      let pokemonRecord = await getPokemon(pokemon.url);\n      return pokemonRecord;\n    }))\n    setPokemonData(_pokemondata)\n  }\n  console.log(pokemonData)\n  return (\n    <div>\n     { loading ? (<div class=\"d-flex justify-content-center\">\n  <div class=\"spinner-border\" role=\"status\">\n    <span class=\"sr-only\">Loading...</span>\n  </div>\n</div>) : (\n       <>\n       <Navbar />\n\n        <div className=\"grid-container\">\n          {pokemonData.map((pokemon, i) => {\n            return <Card key={i} pokemon={pokemon}></Card>;\n          })}\n\n          </div>\n        <div className='btn'> \n       <button type=\"button\" class=\"btn btn-primary\" onClick={prev}>Prev</button>\n       <button type=\"button\" class=\"btn btn-primary\" onClick={next}>Next</button>\n       </div>\n       <p class='bottom'>Made with ‚ù§ from Helsinki</p>\n       </>\n     )}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}